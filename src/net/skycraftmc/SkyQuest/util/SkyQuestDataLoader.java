package net.skycraftmc.SkyQuest.util;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;

import net.skycraftmc.SkyQuest.quest.Objective;
import net.skycraftmc.SkyQuest.quest.ObjectiveType;

public class SkyQuestDataLoader 
{
	private File data;
	public SkyQuestDataLoader(File data)
	{
		if(!data.isDirectory())throw new IllegalArgumentException("File must be directory");
		if(!data.getName().equalsIgnoreCase("SkyQuest"))throw new IllegalArgumentException("File must be the folder generated by the plugin!");
		this.data = data;
	}
	public ArrayList<HashMap<String, Object>> loadQuests()
	{
		File quests = new File(data.getPath() + File.separator + "Quests");
		if(!quests.exists())quests.mkdir();
		ArrayList<HashMap<String, Object>> maps = new ArrayList<HashMap<String, Object>>();
		for(File f:quests.listFiles())
		{
			HashMap<String, Object> map = new HashMap<String, Object>();
			if(!f.getName().endsWith(".txt"))continue;
			if(f.getName().length() <= 4)continue;
			String qname = f.getName().substring(0, f.getName().length() - 4);
			try
			{
				BufferedReader br = new BufferedReader(new FileReader(f));
				String l;
				boolean obj = false;
				boolean desc = false;
				boolean def = true;
				ArrayList<Integer>onext = new ArrayList<Integer>();
				boolean onextb = false;
				String name = null;
				ArrayList<String>d = new ArrayList<String>();
				ArrayList<String>next = new ArrayList<String>();
				String rewards = null;
				boolean opt = false;
				ObjectiveType type = null;
				String target = null;
				ArrayList<Objective> objs = new ArrayList<Objective>();
				while((l=br.readLine()) != null)
				{
					if(desc)
					{
						if(l.replaceAll(" ", "").equalsIgnoreCase("enddescription"))
						{
							desc = false;
							continue;
						}
						d.add(l.trim());
					}
					else if(onextb)
					{
						if(l.replaceAll(" ", "").equalsIgnoreCase("endnext"))
						{
							onextb = false;
							continue;
						}
						int i;
						try{i = Integer.parseInt(l.replaceAll(" ", ""));}catch(NumberFormatException nfe){continue;}
						if(!onext.contains(i))onext.add(i);
					}
					else if(obj)
					{
						String[] tokens = l.split("[:]" ,2);
						if(tokens.length != 2 && tokens[0].replaceAll(" ", "").equalsIgnoreCase("endobjective"))
						{
							obj = false;
							if(rewards != null && type != null && target != null)
							{
								String[] r = rewards.split("[;]");
								ArrayList<String>ra = new ArrayList<String>();
								for(String x:r)ra.add(x);
								ArrayList<String>da = new ArrayList<String>();
								for(String x:d)da.add(x);
								ArrayList<Integer>na = new ArrayList<Integer>();
								for(int i:onext)na.add(i);
								Objective o = new Objective(name, target, da, ra, na, type, opt, def);
								objs.add(o);
							}
							d.clear();
							type = null;
							name = null;
							target = null;
							rewards = null;
							opt = false;
							def = true;
							onext.clear();
							continue;
						}
						String t = tokens[0].trim();
						if(t.equalsIgnoreCase("rewards"))rewards = tokens[1].trim();
						else if(t.equalsIgnoreCase("type"))type = ObjectiveType.getType(tokens[1].toUpperCase());
						else if(t.equalsIgnoreCase("target"))target = tokens[1].trim();
						else if(t.equalsIgnoreCase("description"))
						{
							desc = true;
							d.add(tokens[1].trim());
						}
						else if(t.equalsIgnoreCase("next"))onextb = true;
						else if(t.equalsIgnoreCase("optional"))opt = tokens[1].replaceAll(" ", "").equalsIgnoreCase("true");
						else if(t.equalsIgnoreCase("default"))def = tokens[1].replaceAll(" ", "").equalsIgnoreCase("true");

					}
					else
					{
						String[] tokens = l.split("[:]",2);
						if(tokens.length != 2)continue;
						if(tokens[0].startsWith("objective"))
						{
							name = tokens[1].trim();
							obj = true;
						}
						else if(tokens[0].equalsIgnoreCase("next"))next.add(tokens[1].trim());
					}
				}
				br.close();
				map.put("name", qname);
				map.put("objectives", objs);
				map.put("next", next);
				maps.add(map);
			}
			catch(IOException ioe)
			{
				ioe.printStackTrace();
			}
		}
		return maps;
	}
}
